/*
 * Orders API
 * Simple API to manage businesses and orders
 *
 * OpenAPI spec version: 1.0.1
 * Contact: sergio.adonis@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Business} from '../model/Business';
import {Error} from '../model/Error';

/**
* Business service.
* @module api/BusinessApi
* @version 1.0.1
*/
export class BusinessApi {

    /**
    * Constructs a new BusinessApi. 
    * @alias module:api/BusinessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBusiness operation.
     * @callback module:api/BusinessApi~createBusinessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create business
     * @param {module:model/Business} bussines 
     * @param {module:api/BusinessApi~createBusinessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    createBusiness(bussines, callback) {
      let postBody = bussines;

      // verify the required parameter 'bussines' is set
      if (bussines === undefined || bussines === null) {
        throw new Error("Missing the required parameter 'bussines' when calling createBusiness");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Business;

      return this.apiClient.callApi(
        '/business', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessById operation.
     * @callback module:api/BusinessApi~deleteBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete business by id
     * @param {String} id 
     * @param {module:api/BusinessApi~deleteBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBusinessById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBusinessById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/business/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessById operation.
     * @callback module:api/BusinessApi~getBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business by id
     * @param {String} id 
     * @param {module:api/BusinessApi~getBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    getBusinessById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Business;

      return this.apiClient.callApi(
        '/business/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinesses operation.
     * @callback module:api/BusinessApi~getBusinessesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Business>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get businesses
     * @param {module:api/BusinessApi~getBusinessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Business>}
     */
    getBusinesses(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Business];

      return this.apiClient.callApi(
        '/business', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBusinessById operation.
     * @callback module:api/BusinessApi~updateBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update business by id
     * @param {String} id 
     * @param {module:model/Business} bussines 
     * @param {module:api/BusinessApi~updateBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    updateBusinessById(id, bussines, callback) {
      let postBody = bussines;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBusinessById");
      }

      // verify the required parameter 'bussines' is set
      if (bussines === undefined || bussines === null) {
        throw new Error("Missing the required parameter 'bussines' when calling updateBusinessById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Business;

      return this.apiClient.callApi(
        '/business/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
