/*
 * Orders API
 * Simple API to manage businesses and orders
 *
 * OpenAPI spec version: 1.0.1
 * Contact: sergio.adonis@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Business', 'model/Error', 'model/Props'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Business'), require('../model/Error'), require('../model/Props'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdersApi) {
      root.OrdersApi = {};
    }
    root.OrdersApi.BusinessApi = factory(root.OrdersApi.ApiClient, root.OrdersApi.Business, root.OrdersApi.Error, root.OrdersApi.Props);
  }
}(this, function(ApiClient, Business, Error, Props) {
  'use strict';

  /**
   * Business service.
   * @module api/BusinessApi
   * @version 1.0.1
   */

  /**
   * Constructs a new BusinessApi. 
   * @alias module:api/BusinessApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBusiness operation.
     * @callback module:api/BusinessApi~createBusinessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create business
     * @param {module:model/Props} props 
     * @param {module:api/BusinessApi~createBusinessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    this.createBusiness = function(props, callback) {
      var postBody = props;

      // verify the required parameter 'props' is set
      if (props === undefined || props === null) {
        throw new Error("Missing the required parameter 'props' when calling createBusiness");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Business;

      return this.apiClient.callApi(
        '/business', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessById operation.
     * @callback module:api/BusinessApi~deleteBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete business
     * @param {String} id 
     * @param {module:api/BusinessApi~deleteBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBusinessById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBusinessById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/business/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessById operation.
     * @callback module:api/BusinessApi~getBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business
     * @param {String} id 
     * @param {module:api/BusinessApi~getBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    this.getBusinessById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Business;

      return this.apiClient.callApi(
        '/business/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinesses operation.
     * @callback module:api/BusinessApi~getBusinessesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Business>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get businesses
     * @param {module:api/BusinessApi~getBusinessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Business>}
     */
    this.getBusinesses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Business];

      return this.apiClient.callApi(
        '/business', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBusinessById operation.
     * @callback module:api/BusinessApi~updateBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Business} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update business
     * @param {String} id 
     * @param {module:model/Props} props 
     * @param {module:api/BusinessApi~updateBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Business}
     */
    this.updateBusinessById = function(id, props, callback) {
      var postBody = props;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBusinessById");
      }

      // verify the required parameter 'props' is set
      if (props === undefined || props === null) {
        throw new Error("Missing the required parameter 'props' when calling updateBusinessById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Business;

      return this.apiClient.callApi(
        '/business/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
