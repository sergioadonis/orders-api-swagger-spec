/*
 * Orders API
 * Simple API to manage businesses and orders
 *
 * OpenAPI spec version: 1.0.1
 * Contact: sergio.adonis@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.BusinessApi();
  });

  describe('(package)', function() {
    describe('BusinessApi', function() {
      describe('createBusiness', function() {
        it('should call createBusiness successfully', function(done) {
          // TODO: uncomment, update parameter values for createBusiness call and complete the assertions
          /*
          var bussines = new OrdersApi.Business();
          bussines.id = "12ea34-651d76c-87bd-85b6f9";
          bussines.name = "El Zócalo";
          bussines.description = "Restaurante de comida mexicana, tequila, karaoke y mucho más!";
          bussines.category = "Mexican restaurant";
          bussines.tags = ["Mexican food","Karaoke","Tacos","Tequila"];
          bussines.photoUrl = "https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9";
          bussines.type = "RSTRNT";

          instance.createBusiness(bussines, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OrdersApi.Business);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("12ea34-651d76c-87bd-85b6f9");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("El Zócalo");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Restaurante de comida mexicana, tequila, karaoke y mucho más!");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("Mexican restaurant");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.photoUrl).to.be.a('string');
            expect(data.photoUrl).to.be("https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("RSTRNT");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBusinessById', function() {
        it('should call deleteBusinessById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBusinessById call
          /*
          var id = "id_example";

          instance.deleteBusinessById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBusinessById', function() {
        it('should call getBusinessById successfully', function(done) {
          // TODO: uncomment, update parameter values for getBusinessById call and complete the assertions
          /*
          var id = "id_example";

          instance.getBusinessById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OrdersApi.Business);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("12ea34-651d76c-87bd-85b6f9");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("El Zócalo");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Restaurante de comida mexicana, tequila, karaoke y mucho más!");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("Mexican restaurant");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.photoUrl).to.be.a('string');
            expect(data.photoUrl).to.be("https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("RSTRNT");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBusinesses', function() {
        it('should call getBusinesses successfully', function(done) {
          // TODO: uncomment getBusinesses call and complete the assertions
          /*

          instance.getBusinesses(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OrdersApi.Business);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("12ea34-651d76c-87bd-85b6f9");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("El Zócalo");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("Restaurante de comida mexicana, tequila, karaoke y mucho más!");
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("Mexican restaurant");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.photoUrl).to.be.a('string');
              expect(data.photoUrl).to.be("https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("RSTRNT");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBusinessById', function() {
        it('should call updateBusinessById successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBusinessById call and complete the assertions
          /*
          var id = "id_example";
          var bussines = new OrdersApi.Business();
          bussines.id = "12ea34-651d76c-87bd-85b6f9";
          bussines.name = "El Zócalo";
          bussines.description = "Restaurante de comida mexicana, tequila, karaoke y mucho más!";
          bussines.category = "Mexican restaurant";
          bussines.tags = ["Mexican food","Karaoke","Tacos","Tequila"];
          bussines.photoUrl = "https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9";
          bussines.type = "RSTRNT";

          instance.updateBusinessById(id, bussines, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OrdersApi.Business);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("12ea34-651d76c-87bd-85b6f9");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("El Zócalo");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Restaurante de comida mexicana, tequila, karaoke y mucho más!");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("Mexican restaurant");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.photoUrl).to.be.a('string');
            expect(data.photoUrl).to.be("https://user-contents.domain.example.com/12ea34-651d76c-87bd-85b6f9");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("RSTRNT");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
